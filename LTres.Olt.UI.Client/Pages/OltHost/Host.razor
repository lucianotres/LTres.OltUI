@page "/OltHost/{id:guid}"
@page "/OltHost/new"
@using LTres.Olt.UI.Shared.Models
@attribute [Authorize]
@inject AppPageLocalizer<Host> localizer
@inject OLTServices oltServices
@inject AppDataService appDataService
@inject IJSRuntime js
@inject DialogTools dialog
@inject ToastTools toast
@inject NavigationManager navigation

<EditForm Model="@Model" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />

    <div class="data-header">
        <MudText Typo="Typo.caption" Color="@Color.Default">
            @(Id?.ToString() ?? localizer["NewDev"])
        </MudText>
        <MudSwitch 
            @bind-Value="Model.Active" 
            Disabled="@appDataService.Loading"
            Color="Color.Primary" 
            ThumbIcon="@Icons.Material.Filled.CloudDone"
            >Active</MudSwitch>
    </div>
    

    <div class="data-record">
        <MudTextField @bind-Value="Model.HostName" For="() => Model.Host"
            Disabled="@appDataService.Loading"
            Label="@localizer["Host"]" 
            Variant="Variant.Text" 
            Adornment="Adornment.End" 
            AdornmentIcon="@Icons.Material.Filled.Abc"
            HelperText="@localizer["HostDesc"]"/>

        <MudNumericField @bind-Value="Model.HostPort" 
            Disabled="@appDataService.Loading"
            Label="@localizer["Port"]" 
            Variant="Variant.Text" 
            Adornment="Adornment.End" 
            AdornmentIcon="@Icons.Material.Filled.Pin"
            HelperText="@localizer["PortDesc"]"
            Min="0" Max="65535" Step="1" />

        <MudTextField @bind-Value="Model.Name" For="() => Model.Name"
            Disabled="@appDataService.Loading"
            Label="@localizer["Name"]" 
            Variant="Variant.Text" 
            Adornment="Adornment.End" 
            AdornmentIcon="@Icons.Material.Filled.Abc"
            HelperText="@localizer["NameDesc"]"/>

        <MudTextField @bind-Value="Model.SnmpCommunity"
            Disabled="@appDataService.Loading"
            Label="SNMP Community" 
            Variant="Variant.Text"
            Adornment="Adornment.End" 
            AdornmentIcon="@Icons.Material.Filled.Abc"
            HelperText="@localizer["CommunityDesc"]" />
        
        <MudSelect @bind-Value="Model.SnmpVersion"
            Disabled="@appDataService.Loading"
            Label="SNMP Version">
            <MudSelectItem Value="@(1 as int?)">1</MudSelectItem>
            <MudSelectItem Value="@(2 as int?)">2</MudSelectItem>
        </MudSelect>

        <div>
            <MudNumericField @bind-Value="Model.GetTimeout"
                Disabled="@appDataService.Loading"
                Label="@localizer["Timeout"]" 
                Variant="Variant.Text" 
                Adornment="Adornment.End" 
                AdornmentIcon="@Icons.Material.Filled.Pin"
                HelperText="@localizer["TimeoutDesc"]" 
                Min="100" Max="10000" Step="100"/>
            <MudSwitch @bind-Value="Model.SnmpBulk" 
                Disabled="@appDataService.Loading" 
                Color="@Color.Primary"
                >SNMP Bulk</MudSwitch>
        </div>
    </div>

    <div class="data-actions">
        <MudButton Variant="Variant.Filled"
            Disabled="@appDataService.Loading"
            StartIcon="@Icons.Material.Filled.Save"
            Color="@Color.Success"
            ButtonType="ButtonType.Submit">@localizer["Save"]</MudButton>
        <MudButton Variant="Variant.Filled"
            Disabled="@appDataService.Loading"
            StartIcon="@Icons.Material.Filled.Cancel"
            Color="@Color.Default"
            OnClick="HandleCancel">@localizer["Cancel"]</MudButton>
    </div>
</EditForm>

@code {
    [Parameter]
    public Guid? Id { get; set; }

    public OLT_Host Model { get; private set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) 
            return;

        appDataService.SetTitle(localizer);

        if (!await LoadData())
        {
            _ = await (await dialog.OkAsync(localizer["NotFound"])).Result;
            navigation.NavigateTo("/OltHost");
        }
    }

    private async Task<bool> LoadData()
    {
        if (!Id.HasValue)
        {
            NewData();
            return true;
        }

        try
        {
            appDataService.Loading = true;
            StateHasChanged();

            Model = (await oltServices.GetHost(Id.Value)) ?? new();
            return Model.Id == Id;
        }
        finally
        {
            appDataService.Loading = false;
            StateHasChanged();
        }
    }

    private void NewData()
    {
        Model = new()
        {
            Id = Guid.Empty,
            HostName = "",
            HostPort = 161,
            Active = true,
            SnmpCommunity = "public",
            SnmpVersion = 2,
            SnmpBulk = true,
            GetTimeout = 1000
        };
        StateHasChanged();
    }

    private async Task<bool?> SaveData()
    {
        try
        {
            appDataService.Loading = true;
            StateHasChanged();

            if (Id.HasValue)
            {
                var result = await oltServices.PutHost(Model);
                return result == Guid.Empty ? null : result == Id;
            }
            else
            {
                var result = await oltServices.PostHost(Model);
                return result.HasValue && result != Guid.Empty;
            }
        }
        finally
        {
            appDataService.Loading = false;
            StateHasChanged();
        }
    }

    private async Task HandleCancel()
    {
        await js.InvokeVoidAsync("history.back");
    }

    private async Task HandleSubmit()
    {
        var saved = await SaveData();

        if (saved == true)
            toast.Success(string.Format(localizer["SavedMsg"], Model.Name));
                
        if (saved == false)
            toast.Error(localizer["SaveError"]);

        if (saved.GetValueOrDefault(true))
            navigation.NavigateTo("/OltHost");
    }
}