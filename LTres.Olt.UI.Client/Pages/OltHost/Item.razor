@page "/OltHost/Item/{id:guid}"
@using LTres.Olt.UI.Shared.Models
@attribute [Authorize]
@inject AppPageLocalizer<Item> localizer
@inject OLTServices oltServices
@inject AppDataService appDataService
@inject IJSRuntime js
@inject DialogTools dialog
@inject ToastTools toast

<MudToolBar Dense="true">
    <MudButton Variant="@Variant.Filled" 
        StartIcon="@Icons.Material.Filled.ArrowCircleLeft"
        OnClick='async () => await js.InvokeVoidAsync("history.back")'
        >@localizer["Return"]</MudButton>
    <MudSpacer />
    <MudButton Variant="@Variant.Filled" 
        EndIcon="@Icons.Material.Filled.AddCircle"
        Href="@($"/OltHost/Item/New/{Id}")"
        >@localizer["New"]</MudButton>
</MudToolBar>

<div>
    <MudTable ServerData="ServerDataLoad" Dense="true" Class="item-table" RowClassFunc="RowClassCustomized">
        <HeaderContent>
            <MudTh>@localizer["Action"]</MudTh>
            <MudTh>@localizer["ItemKey"]</MudTh>
            <MudTh>@localizer["Interval"]</MudTh>
            <MudTh>@localizer["History"]</MudTh>
            <MudTh>@localizer["Maintain"]</MudTh>            
            <MudTh>@localizer["Active"]</MudTh>
            <MudTh>@localizer["DescriptionCol"]</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="@localizer["Action"]"><OltItemAction Action="@context.Action" /></MudTd>
            <MudTd DataLabel="@localizer["ItemKey"]">@context.ItemKey</MudTd>
            <MudTd DataLabel="@localizer["Interval"]">@(context.Interval.HasValue ? context.Interval.Value.ToStrFromSeconds() : null)</MudTd>
            <MudTd DataLabel="@localizer["History"]">@(context.HistoryFor.HasValue ? context.HistoryFor.Value.ToStrFromMinutes() : null)</MudTd>
            <MudTd DataLabel="@localizer["Maintain"]">@(context.MaintainFor.HasValue ? context.MaintainFor.Value.ToStrFromMinutes() : null)</MudTd>
            <MudTd DataLabel="@localizer["Active"]"><ActiveInactiveIcon Active="@context.Active" /></MudTd>
            <MudTd DataLabel="@localizer["DescriptionCol"]">@context.Description</MudTd>
            <MudTd>
                <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" AriaLabel="Open user menu">
                    <MudMenuItem Icon="@Icons.Material.Filled.Edit" Label="Edit" Href="@($"/OltHost/Item/Edit/{context.Id}")" />
                    @if (context.Action == OLT_Host_ItemExtensions.ActionSnmpWalk)
                    {
                        <MudMenuItem Icon="@Icons.Material.Filled.AddCircle" Label="New related item" Href="@($"/OltHost/Item/New/{Id}?RelatedTo={context.Id}")" />
                    }
                    <MudMenuItem Icon="@Icons.Material.Filled.Delete" Label="Delete" />
                    <MudMenuItem Label="Active / Inactive" />
                </MudMenu>
            </MudTd>
        </RowTemplate>
    </MudTable>
</div>

@code 
{
    [Parameter]
    public Guid? Id { get; set; }


    protected override void OnInitialized()
    {
        appDataService.SetTitle(localizer);
    }

    private async Task<TableData<OLT_Host_Item>> ServerDataLoad(TableState state, CancellationToken token)
    {
        if (!Id.HasValue)
            return new TableData<OLT_Host_Item>() { TotalItems = 0 };

        var serverDataList = await oltServices.GetHostItems(Id!.Value);       
        if (serverDataList == null)
            return new TableData<OLT_Host_Item>() { TotalItems = 0 };
        
        var normalList = serverDataList
            .Where(w => !w.Template.GetValueOrDefault())
            .OrderBy(k => k.ItemKey)
            .ToList();

        var finalList = new List<OLT_Host_Item>();
        foreach(var x in normalList)
        {
            finalList.Add(x);
            finalList.AddRange(serverDataList
                .Where(w => w.From == x.Id && w.Template == true)
                .OrderBy(k => k.ItemKey));
        }        

        return new TableData<OLT_Host_Item>() { TotalItems = finalList.Count, Items = finalList };
    }

    private string RowClassCustomized(OLT_Host_Item item, int index) 
        => item.Template.GetValueOrDefault() ? "is-template" : "is-normal";

}        