@page "/OltHost/Item/{id:guid}"
@using LTres.Olt.UI.Shared.Models
@attribute [Authorize]
@inject AppPageLocalizer<Item> localizer
@inject OLTServices oltServices
@inject AppDataService appDataService
@inject IJSRuntime js
@inject DialogTools dialog
@inject ToastTools toast
@inject ILogger<Item> logger

<MudToolBar Dense="true">
    <MudButton Variant="@Variant.Filled" 
        StartIcon="@Icons.Material.Filled.ArrowCircleLeft"
        OnClick='async () => await js.InvokeVoidAsync("history.back")'
        >@localizer["Return"]</MudButton>
    <MudSpacer />
    <MudButton Variant="@Variant.Filled" 
        EndIcon="@Icons.Material.Filled.AddCircle"
        Href="@($"/OltHost/Item/New/{Id}")"
        >@localizer["New"]</MudButton>
</MudToolBar>

<div>
    <MudTable @ref="dtTable" 
        ServerData="ServerDataLoad" 
        Dense="true" 
        Class="item-table" 
        RowClassFunc="RowClassCustomized" 
        SelectOnRowClick="true"
        SelectedItemChanged="@((OLT_Host_Item i) => StateHasChanged())">
        <LoadingContent>
            <MudText>@localizer["Loading"]</MudText>
        </LoadingContent>
        <HeaderContent>
            <MudTh>@localizer["Action"]</MudTh>
            <MudTh>@localizer["ItemKey"]</MudTh>
            <MudTh>@localizer["Interval"]</MudTh>
            <MudTh>@localizer["History"]</MudTh>
            <MudTh>@localizer["Maintain"]</MudTh>            
            <MudTh>@localizer["Active"]</MudTh>
            <MudTh>@localizer["DescriptionCol"]</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="@localizer["Action"]"><OltItemAction Action="@context.Action" /></MudTd>
            <MudTd DataLabel="@localizer["ItemKey"]">@context.ItemKey</MudTd>
            <MudTd DataLabel="@localizer["Interval"]">@(context.Interval.HasValue ? context.Interval.Value.ToStrFromSeconds() : null)</MudTd>
            <MudTd DataLabel="@localizer["History"]">@(context.HistoryFor.HasValue ? context.HistoryFor.Value.ToStrFromMinutes() : null)</MudTd>
            <MudTd DataLabel="@localizer["Maintain"]">@(context.MaintainFor.HasValue ? context.MaintainFor.Value.ToStrFromMinutes() : null)</MudTd>
            <MudTd DataLabel="@localizer["Active"]"><ActiveInactiveIcon Active="@context.Active" /></MudTd>
            <MudTd DataLabel="@localizer["DescriptionCol"]">@context.Description</MudTd>
            <MudTd>
                <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" AriaLabel="Open user menu">
                    <MudMenuItem Icon="@Icons.Material.Filled.Edit" Label="Edit" Href="@($"/OltHost/Item/Edit/{context.Id}")" />
                    @if (context.Action == OLT_Host_ItemExtensions.ActionSnmpWalk)
                    {
                        <MudMenuItem Icon="@Icons.Material.Filled.AddCircle" Label="New related item" Href="@($"/OltHost/Item/New/{Id}?RelatedTo={context.Id}")" />
                    }
                    <MudMenuItem Icon="@Icons.Material.Filled.Delete" Label="Delete" OnClick="() => HandleDeleteItem(context)" />
                    @* <MudMenuItem Label="Active / Inactive" /> *@
                </MudMenu>
            </MudTd>
        </RowTemplate>
        <ChildRowContent>
            @if(context == dtTable.SelectedItem)
            {
                <MudTr Class="is-detail">
                    <td colspan="8">
                        <div class="det-content">
                            <OltHostItemLastValues Id="@context.Id"/>
                            <div class="det-info">
                                <div class="det-info-item">
                                    <MudText Typo="Typo.caption">Probe status:</MudText>
                                    <MudText Typo="Typo.body1" Color="Color.Success">Success</MudText>
                                </div>
                                <div class="det-info-item">
                                    <MudText Typo="Typo.caption">Last probed at:</MudText>
                                    <MudText Typo="Typo.body1">2025-05-01 10:55:01</MudText>
                                </div>
                                <div class="det-info-item">
                                    <MudText Typo="Typo.caption">Last value:</MudText>
                                    <MudText Typo="Typo.body1">315</MudText>
                                </div>
                            </div>
                        </div>
                    </td>
                </MudTr>
            }
        </ChildRowContent>
    </MudTable>
</div>

@code 
{
    [Parameter]
    public Guid? Id { get; set; }

    private MudTable<OLT_Host_Item> dtTable { get; set; }


    protected override void OnInitialized()
    {
        appDataService.SetTitle(localizer);
    }

    private async Task<TableData<OLT_Host_Item>> ServerDataLoad(TableState state, CancellationToken token)
    {
        if (!Id.HasValue)
            return new TableData<OLT_Host_Item>() { TotalItems = 0 };

        var serverDataList = await oltServices.GetHostItems(Id!.Value);       
        if (serverDataList == null)
            return new TableData<OLT_Host_Item>() { TotalItems = 0 };
        
        var normalList = serverDataList
            .Where(w => !w.Template.GetValueOrDefault())
            .OrderBy(k => k.ItemKey)
            .ToList();

        var finalList = new List<OLT_Host_Item>();
        foreach(var x in normalList)
        {
            finalList.Add(x);
            finalList.AddRange(serverDataList
                .Where(w => w.From == x.Id && w.Template == true)
                .OrderBy(k => k.ItemKey));
        }        

        return new TableData<OLT_Host_Item>() { TotalItems = finalList.Count, Items = finalList };
    }

    private string RowClassCustomized(OLT_Host_Item item, int index) 
        => item.Template.GetValueOrDefault() ? "is-template" : "is-normal";

    
    private async Task<(bool ok, string? message)> DeleteData(OLT_Host_Item item)
    {
        try
        {
            appDataService.Loading = true;
            StateHasChanged();
            
            return await oltServices.DeleteHostItem(item.Id);
        }
        catch(Exception error)
        {
            logger.LogError(error, null);
            return (false, null);
        }
        finally
        {
            appDataService.Loading = false;
            StateHasChanged();
        }
    }

    private async void HandleDeleteItem(OLT_Host_Item item)
    {
        if (item.Id == Guid.Empty)
            return;

        
        var firstDialog = await dialog.DeleteAsync(string.Format(localizer["DeleteMsg1"], item.Description), localizer["Title"]);
        if (((await firstDialog.Result)?.Canceled).GetValueOrDefault(true))
            return;

        var secondDialog = await dialog.DeleteAsync(string.Format(localizer["DeleteMsg2"], item.Description), localizer["Title"]);
        if (((await secondDialog.Result)?.Canceled).GetValueOrDefault(true))
            return;

        var deleteResult = await DeleteData(item);
        if (deleteResult.ok)
        {
            toast.Success(string.Format(localizer["DeleteSuccess"], item.Description));
            await dtTable.ReloadServerData();
        }
        else
        {
            toast.Error(string.Format(deleteResult.message ?? localizer["SaveError"], item.Description));
        }
    }
}        