@page "/OltHost/Item/Edit/{id:guid}"
@page "/OltHost/Item/New/{idolt:guid}"
@using LTres.Olt.UI.Shared.Models
@attribute [Authorize]
@inject AppPageLocalizer<ItemEdit> localizer
@inject OLTServices oltServices
@inject AppDataService appDataService
@inject DialogTools dialog
@inject ToastTools toast
@inject NavigationManager navigation
@inject ILogger<ItemEdit> logger

@if (Model == null && appDataService.Loading)
{
    <MudText>@localizer["Loading"]</MudText>
}
else if (Model == null)
{
    <MudText>@localizer["NotFound"]</MudText>
}
else
{
<EditForm EditContext="@editContext">
    <DataAnnotationsValidator />
    
    <div class="data-header">
        <MudText Typo="Typo.caption" Color="@Color.Default">
            @(Id?.ToString() ?? localizer["NewItem"])
        </MudText>
        <MudSwitch @bind-Value="Model.Active" 
            Disabled="@appDataService.Loading"
            Color="Color.Primary" 
            ThumbIcon="@Icons.Material.Filled.CloudDone"
            >Active</MudSwitch>
    </div>

    <div class="data-record">
        <MudTextField @bind-Value="Model.Description" For="() => Model.Description"
            Disabled="@appDataService.Loading"
            Label="@localizer["ItemDescription"]" 
            Variant="Variant.Text" 
            Adornment="Adornment.End" 
            AdornmentIcon="@Icons.Material.Filled.Abc"
            HelperText="@localizer["ItemDescriptionDesc"]" />

        <MudSelect @bind-Value="Model.Action" For="() => Model.Action"
            Disabled="@appDataService.Loading"
            Label="@localizer["Action"]"
            HelperText="@localizer["ActionDesc"]"
            Variant="@Variant.Text">
            @foreach(var i in OLT_Host_ItemExtensions.ValidActions)
            {
                <MudSelectItem Value="@i">
                    <OltItemAction Action="@i" /><span class="ml-3">@i</span>
                </MudSelectItem>
            }
        </MudSelect>

        <MudTextField @bind-Value="Model.ItemKey" For="() => Model.ItemKey"
            Disabled="@appDataService.Loading"
            Label="@localizer["ItemKey"]" 
            Variant="Variant.Text" 
            Adornment="Adornment.End" 
            AdornmentIcon="@Icons.Material.Filled.Abc"
            HelperText="@localizer["ItemKeyDesc"]" />

        <MudNumericField @bind-Value="Model.Interval" 
            Disabled="@appDataService.Loading"
            Label="@localizer["Interval"]" 
            Variant="Variant.Text" 
            Adornment="Adornment.End" 
            AdornmentIcon="@Icons.Material.Filled.Pin"
            HelperText="@localizer["IntervalDesc"]"
            Min="@OLT_Host_ItemExtensions.MinInterval" Max="@OLT_Host_ItemExtensions.MaxInterval" Step="1" />

        <MudNumericField @bind-Value="Model.HistoryFor" 
            Disabled="@appDataService.Loading"
            Label="@localizer["HistoryFor"]" 
            Variant="Variant.Text" 
            Adornment="Adornment.End" 
            AdornmentIcon="@Icons.Material.Filled.Pin"
            HelperText="@localizer["HistoryForDesc"]"
            Min="@OLT_Host_ItemExtensions.MinHistoryFor" Max="@OLT_Host_ItemExtensions.MaxHistoryFor" Step="1" 
            Clearable="true"/>

        <MudNumericField @bind-Value="Model.MaintainFor" 
            Disabled="@appDataService.Loading"
            Label="@localizer["MaintainFor"]" 
            Variant="Variant.Text" 
            Adornment="Adornment.End" 
            AdornmentIcon="@Icons.Material.Filled.Pin"
            HelperText="@localizer["MaintainForDesc"]"
            Min="@OLT_Host_ItemExtensions.MinMaintainFor" Max="@OLT_Host_ItemExtensions.MaxMaintainFor" Step="1" 
            Clearable="true" />

        <MudTextField @bind-Value="Model.Calc" For="() => Model.Calc"
            Disabled="@appDataService.Loading"
            Label="@localizer["Calc"]" 
            Variant="Variant.Text" 
            Adornment="Adornment.End" 
            AdornmentIcon="@Icons.Material.Filled.Abc"
            HelperText="@localizer["CalcDesc"]" />    
    </div>

    <div class="data-actions">
        <MudButton Variant="Variant.Filled"
            Disabled="@appDataService.Loading"
            StartIcon="@Icons.Material.Filled.Save"
            Color="@Color.Success"
            OnClick="HandleSubmit">@localizer["Save"]</MudButton>
        <MudButton Variant="Variant.Filled"
            Disabled="@appDataService.Loading"
            StartIcon="@Icons.Material.Filled.Cancel"
            Color="@Color.Default"
            OnClick="HandleCancel">@localizer["Cancel"]</MudButton>
    </div>
</EditForm>
}

@code {
    [Parameter]
    public Guid? Id { get; set; }

    [Parameter]
    public Guid? IdOlt { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "RelatedTo")]
    public Guid? RelatedTo { get; set; }

    public OLT_Host_Item? Model 
    { 
        get => _Model; 
        private set 
        {
            _Model = value;
            editContext = value == null ? null : new EditContext(value);
        } 
    }
    private OLT_Host_Item? _Model;

    private EditContext? editContext;

    protected override void OnInitialized()
    {
        appDataService.SetTitle(localizer);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await LoadData();
    }

    private async Task LoadData()
    {
        if (!Id.HasValue && IdOlt.HasValue)
        {
            NewItemCreate();
            return;
        }

        if (!Id.HasValue)
            return;

        try
        {
            appDataService.Loading = true;
            StateHasChanged();

            Model = await oltServices.GetHostItem(Id.Value);
        }
        catch(Exception error)
        {
            toast.Error(localizer["LoadError"]);
            logger.LogError(error.ToString());
        }
        finally
        {
            appDataService.Loading = false;
            StateHasChanged();
        }
    }

    private void NewItemCreate()
    {
        if (!IdOlt.HasValue)
            return;

        Model = new()
        {
            IdOltHost = IdOlt.Value,
            Active = true,
            Action = OLT_Host_ItemExtensions.ActionSnmpGet,
            Interval = 60,
            IdRelated = RelatedTo.HasValue ? RelatedTo.Value : null,
            Template = RelatedTo.HasValue
        };

        StateHasChanged();
    }

    private string? _savedError;

    private async Task<bool?> SaveData()
    {
        try
        {
            appDataService.Loading = true;
            StateHasChanged();

            _savedError = null;

            if (Id.HasValue)
            {
                var result = await oltServices.PutHostItem(Model);
                _savedError = result.message;
                return (result.ok && result.id == Guid.Empty) 
                    ? null //nothing changed
                    : (result.ok && result.id == Id.Value); //saved?
            }
            else
            {
                var result = await oltServices.PostHostItem(Model);
                _savedError = result.message;
                return (result.ok && result.id != Guid.Empty);
            }
        }
        catch(Exception error)
        {
            return false;
            logger.LogError(error.ToString());
        }
        finally
        {
            appDataService.Loading = false;
            StateHasChanged();
        }
    }

    private void NavigateToOltItems() => navigation.NavigateTo(Model == null ? $"/OltHost" : $"/OltHost/Item/{Model.IdOltHost}");
    
    private void HandleCancel() => NavigateToOltItems();

    private async Task HandleSubmit()
    {
        if (editContext == null || !editContext.Validate())
            return;

        var saved = await SaveData();

        if (saved == true)
            toast.Success(string.Format(localizer["SavedMsg"], Model.Description));

        if (saved == false)
            toast.Error(_savedError ?? localizer["SaveError"]);

        if (saved.GetValueOrDefault(true))
            NavigateToOltItems();
    }
}