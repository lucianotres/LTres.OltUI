@page "/OltHost"
@using LTres.Olt.UI.Shared.Models
@attribute [Authorize]
@inject AppPageLocalizer<Index> localizer
@inject OLTServices oltServices
@inject AppDataService appDataService
@inject DialogTools dialog

<PageTitle>@localizer.GetTitle()</PageTitle>

<MudText Typo="Typo.h3">@localizer["Title"]</MudText>
<MudText Typo="Typo.h6" Class="mb-4">@localizer["Description"]</MudText>

<div class="data-list">
    @foreach(var host in _Hosts) {
        <MudCard @key="host.Id" Outlined="true" Square="false">
            <MudCardContent>
                <MudText Typo="Typo.h5">@host.Name</MudText>
                <MudText Typo="Typo.h6">@host.Host</MudText>
                <MudText Typo="Typo.body2">* Todo - add more info</MudText>
                @if (host.tags != null) {
                    @foreach(var tag in host.tags)
                    {
                        <MudChip @key="@tag" Value="@tag" Color="Color.Secondary" />
                    }
                }
            </MudCardContent>
            <MudCardActions>
                <MudTooltip Text="@localizer["Edit"]" Arrow="true">
                    <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" Href="@($"/OltHost/{host.Id}")" />
                </MudTooltip>
                <MudTooltip Text="@localizer["Delete"]" Arrow="true">
                    <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Default" OnClick="() => HandleDeleteHost(host)" />
                </MudTooltip>
            </MudCardActions>
        </MudCard>
    }
</div>

@code {
    private IEnumerable<OLT_Host> _Hosts = new OLT_Host[0];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await LoadData();
    }

    private async Task LoadData() 
    {
        try
        {
            appDataService.Loading = true;
            _Hosts = await oltServices.GetHosts() ?? new OLT_Host[0];
        }
        finally
        {
            appDataService.Loading = false;
            StateHasChanged();
        }
    }

    private async void HandleDeleteHost(OLT_Host host)
    {
        //todo: parameters here for dialog
        _ = await dialog.DeleteAsync("Delete test", localizer["Title"]);
    }
}