@using LTres.Olt.UI.Shared.Models
@using System.Windows.Markup
@implements IDisposable
@inject OLTValuesHistoryService historyService;


<div class="det-content">
    <MudTimeSeriesChart ChartSeries="@_series"
                        Width="100%"
                        Height="150"
                        MatchBoundsToSize="true"
                        ChartOptions="@(new ChartOptions()
                        {
                            LineStrokeWidth = 2,
                            ShowLegend = false,
                            MaxNumYAxisTicks = 5
                        })"
                        TimeLabelSpacing="TimeSpan.FromMinutes(1)"
                        DataMarkerTooltipTimeLabelFormat="yyyy-MM-dd HH:mm:ss" />
    <div class="det-info">
        <div class="det-info-item">
            <MudText Typo="Typo.caption">Probe status:</MudText>
            <MudText Typo="Typo.body1" Color="Color.Success">Success</MudText>
        </div>
        <div class="det-info-item">
            <MudText Typo="Typo.caption">Last probed at:</MudText>
            <MudText Typo="Typo.body1">@_Values?.LastProbed?.ToString("yyyy-MM-dd HH:mm:ss")</MudText>
        </div>
        <div class="det-info-item">
            <MudText Typo="Typo.caption">Last value:</MudText>
            <MudText Typo="Typo.body1">@GetLastValue()</MudText>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private OLT_Host_Item_Values? _Values;

    private List<TimeSeriesChartSeries> _series = new();
    private TimeSeriesChartSeries _serie = new() {
        Index = 0,
        Name = "Value"
    };

    CancellationTokenSource ctsTestLoop = new();
   
    protected override async Task OnInitializedAsync()
    {
        await StartData();

        //loop test
        _ = Task.Factory.StartNew(async () => {
            while (!ctsTestLoop.IsCancellationRequested) {
                await UpdateData();
                await Task.Delay(5000);
            }
        }, ctsTestLoop.Token);
    }

    public void Dispose()
    {
        ctsTestLoop.Cancel();
    }

    private void ValuesToGraph()
    {
        if (_Values == null)
            return;

        _serie.Data = _Values.Values
            .Where(x => x.ValueInt.HasValue || x.ValueUInt.HasValue)
            .Select(x => new TimeSeriesChartSeries.TimeValue(
                x.At, 
                x.ValueInt.HasValue ? x.ValueInt.Value : x.ValueUInt!.Value))
            .ToList();
    }

    private async Task StartData()
    {
        _series.Clear();
        _series.Add(_serie);

        _Values = await historyService.GetValues(Id, 30, null, null);

        ValuesToGraph();
        StateHasChanged();
    }

    private async Task UpdateData()
    {
        if (_Values == null)
            return;

        var oldValues = _Values.Values;

        var newHistoryValues = await historyService.GetValues(_Values.Id, 1, oldValues.Last().At.AddSeconds(5), null);
        var newHistoryValue = newHistoryValues.Values.FirstOrDefault();

        if (newHistoryValue == null)
            return;

        _Values = newHistoryValues;
        _Values.Values = oldValues.Skip(1).Append(newHistoryValue).ToList();
        
        ValuesToGraph();
        StateHasChanged();
    }

    private string GetLastValue()
    {
        if (_Values == null)
            return "(-)";

        if (_Values.ProbedValueInt.HasValue)
            return _Values.ProbedValueInt.Value.ToString();
        else if (_Values.ProbedValueUInt.HasValue)
            return _Values.ProbedValueUInt.Value.ToString();
        else
            return _Values.ProbedValueStr ?? "";
    }
}